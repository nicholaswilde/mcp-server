{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MCP Server","text":"<p>An MCP (Multi-Cloud Platform) server that provides a library of reusable agent instructions and scripts to a generative AI model.</p> <p>Warning</p> <p>This project is in a development stage. Features and configurations are subject to change.</p> <p>This documentation provides a comprehensive guide to the MCP Server. Use the navigation on the left to explore different sections.</p>"},{"location":"#tldr","title":"TL;DR","text":"<p>To bootstrap the project <pre><code>task bootstrap\n</code></pre></p> <p>To run the server locally: <pre><code>task run\n</code></pre></p> <p>Add to <code>gemini-cli</code> settings: <pre><code>{\n  \"mcpServers\": {\n    \"sharedAgents\": {\n      \"httpUrl\": \"http://&lt;ip-address&gt;:8080\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"#overview","title":"Overview","text":"<p>This server uses FastAPI to expose a set of tools that can be consumed by a compatible AI model (like Google's Gemini). The primary purpose is to provide the AI with a library of standardized instructions (<code>AGENTS.md</code> files) and utility scripts (<code>.sh</code> files). This allows the AI to perform complex, context-aware tasks consistently by drawing from a central, version-controlled library.</p> <p>The core components are: -   <code>app/server.py</code>: The FastAPI application that serves the tools. -   <code>agents-library/</code>: The central repository for agent instructions and scripts.</p>"},{"location":"#license","title":"License","text":"<p>\u200b\u200bApache License 2.0</p>"},{"location":"#author","title":"Author","text":"<p>This project was started in 2025 by Nicholas Wilde.</p>"},{"location":"agents-library-files/","title":"Agents Library Files","text":"<p>The <code>agents-library</code> directory contains a collection of markdown files that serve as guidelines and instructions for AI agents. These files define best practices, coding standards, and operational procedures for various aspects of software development and cloud management.</p>"},{"location":"agents-library-files/#purpose-of-markdown-files","title":"Purpose of Markdown Files","text":"<p>Each markdown file within the <code>agents-library/markdown/</code> directory focuses on a specific domain or technology, providing detailed guidance. For example:</p> <ul> <li><code>python_guidelines.agents.md</code>: Outlines Python scripting best practices.</li> <li><code>bash_guidelines.agents.md</code>: Details standards for writing bash scripts.</li> <li><code>dockerfile_guidelines.agents.md</code>: Provides best practices for creating Dockerfiles.</li> <li><code>api_design_guidelines.agents.md</code>: Sets standards for API design.</li> <li><code>git.agents.md</code>: Defines conventions for Git commit messages and tagging.</li> <li><code>cloud_best_practices.agents.md</code>: Lists general cloud best practices for agents.</li> <li><code>mkdocs_material_guidelines.agents.md</code>: Specifies guidelines for documenting with MkDocs-Material.</li> <li><code>terraform_guidelines.agents.md</code>: Outlines best practices for Terraform configurations.</li> <li><code>env_sops_guidelines.agents.md</code>: Details guidelines for managing environment variables and secrets with SOPS.</li> <li><code>taskfile_creation.agents.md</code>: Provides guidance on creating and using <code>Taskfile.yml</code>.</li> </ul> <p>These files are crucial for ensuring consistency and quality across different development tasks performed by the AI.</p>"},{"location":"agents-library-files/#bash-scripts","title":"Bash Scripts","text":"<p>The <code>agents-library/bash/</code> directory contains various bash scripts designed to automate common tasks related to cloud operations and system management. These scripts are intended to be used by AI agents or directly by developers.</p> <ul> <li><code>cost_optimizer.sh</code>: Analyzes and optimizes cloud resource costs.</li> <li><code>deploy_app.sh</code>: Automates the deployment of applications.</li> <li><code>health_check.sh</code>: Performs health checks on services or applications.</li> <li><code>list_markdown_files.sh</code>: Lists markdown files within the agents library.</li> <li><code>manage_resource.sh</code>: Provides functionality for managing cloud resources.</li> <li><code>monitor_logs.sh</code>: Monitors application or system logs.</li> <li><code>uptime.sh</code>: Checks and reports the uptime of services.</li> </ul>"},{"location":"agents-library-files/#updating-and-creating-agent-guidelines","title":"Updating and Creating Agent Guidelines","text":"<p>To update an existing guideline or create a new one:</p> <ol> <li>Identify the Need: Determine if a new guideline is needed or if an existing one requires updates based on project requirements or observed best practices.</li> <li>Create/Edit Markdown File:<ul> <li>New File: Create a new markdown file in the <code>agents-library/markdown/</code> directory. The filename should be descriptive and follow the convention <code>*.agents.md</code> (e.g., <code>new_guideline.agents.md</code>).</li> <li>Existing File: Locate the relevant markdown file in <code>agents-library/markdown/</code> and edit its content.</li> </ul> </li> <li>Content Structure: Follow the established structure within existing files. Typically, this includes:<ul> <li>A clear title with an emoji.</li> <li>Sections detailing principles, best practices, naming conventions, code style, security considerations, and examples.</li> <li>Use of Markdown for formatting, including headings, lists, code blocks, and links.</li> </ul> </li> <li>LLM Assistance: An AI model (like myself) can assist in drafting, refining, and formatting these markdown files. You can prompt the AI to generate content for a specific guideline or to improve existing content. For example, you could ask: \"Draft guidelines for writing secure Go code, following the pattern of <code>python_guidelines.agents.md</code>.\"</li> <li>Review and Commit: Once the markdown file is updated or created, review the changes and commit them to the repository following the project's Git conventions.</li> </ol> <p>By maintaining these guidelines, we ensure that AI agents operate effectively and consistently within the project's established standards.</p>"},{"location":"contributing/","title":"Contributing to MCP Server","text":"<p>We welcome contributions to the MCP Server project! By contributing, you agree to abide by our Code of Conduct.</p> <p>Please take a moment to review this document to ensure a smooth and effective contribution process.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":""},{"location":"contributing/#reporting-bugs","title":"Reporting Bugs","text":"<p>If you find a bug, please help us by reporting it. A good bug report makes it easier for us to track and fix the issue. Please include:</p> <ul> <li>A clear and concise title.</li> <li>A detailed description of the bug.</li> <li>Steps to reproduce the behavior.</li> <li>Expected versus actual behavior.</li> <li>Any relevant logs or error messages.</li> </ul>"},{"location":"contributing/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>We love new ideas! If you have a suggestion for an enhancement or a new feature, please open an issue and describe it in detail. Include:</p> <ul> <li>A clear and concise title.</li> <li>A detailed description of the proposed enhancement.</li> <li>Any mockups or examples that help illustrate your idea.</li> </ul>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<ol> <li>Fork the Repository: Start by forking the <code>mcp-server</code> repository to your GitHub account.</li> <li>Clone Your Fork: Clone your forked repository to your local machine.     <pre><code>git clone https://github.com/YOUR_USERNAME/mcp-server.git\ncd mcp-server\n</code></pre></li> <li>Create a New Branch: Create a new branch for your feature or bug fix. Use a descriptive name.     <pre><code>git checkout -b feature/your-feature-name\n# or\ngit checkout -b bugfix/your-bug-fix-name\n</code></pre></li> <li>Set up Your Development Environment:     Ensure you have Python 3.11+ and Docker installed.     <pre><code>python3 -m venv venv\nsource venv/bin/activate\npip install pip-tools\npip-compile requirements.in\npip-sync\n</code></pre></li> <li>Set up Pre-Commit Hooks:     This repository uses <code>pre-commit</code> to automatically run linters and formatters before each commit.     <pre><code>pre-commit install\n</code></pre></li> <li> <p>Make Your Changes:     Implement your feature or bug fix. Remember to:</p> <ul> <li>Adhere to existing code style and conventions.</li> <li>Write clear, concise, and well-documented code.</li> <li>Add or update tests for your changes.</li> <li>Ensure all existing tests pass.</li> </ul> </li> <li> <p>Run Tests:     Before committing, ensure all tests pass.     <pre><code>task test\n</code></pre></p> </li> <li>Commit Your Changes:     When you commit, the pre-commit hooks will automatically run and may fix formatting issues. If they fail, you'll need to stage the changes and commit again.     <pre><code>git add .\ngit commit -m \"feat: Your descriptive commit message\"\n</code></pre></li> <li>Push to Your Fork: <pre><code>git push origin feature/your-feature-name\n</code></pre></li> <li>Create a Pull Request:     Go to the original <code>mcp-server</code> repository on GitHub and create a new pull request from your forked branch.<ul> <li>Provide a clear title and description for your pull request.</li> <li>Reference any related issues.</li> </ul> </li> </ol>"},{"location":"contributing/#code-style-and-conventions","title":"Code Style and Conventions","text":"<ul> <li>Python: Follow PEP 8 guidelines. We use <code>ruff</code> for linting and <code>black</code> for formatting.</li> <li>Docstrings: Use Google-style docstrings for all functions, classes, and modules.</li> <li>Type Hinting: Use type hints for all function arguments and return values where appropriate.</li> </ul>"},{"location":"contributing/#documentation-style","title":"Documentation Style","text":"<p>All documentation is written in Markdown and generated using MkDocs with the Material theme. Please ensure:</p> <ul> <li>Clear and descriptive headings.</li> <li>Use admonitions for important information (e.g., <code>!!! note</code>, <code>!!! warning</code>).</li> <li>Specify the language for code blocks (e.g., <code>python`,</code>bash`).</li> <li>Add new pages to the <code>nav</code> section of <code>mkdocs.yml</code> if you create new documentation files.</li> </ul>"},{"location":"contributing/#git-commit-messages","title":"Git Commit Messages","text":"<p>We follow the Conventional Commits specification for commit messages. This helps with automated changelog generation and understanding the nature of changes.</p> <p>Examples: *   <code>feat: Add user authentication module</code> *   <code>fix: Correct off-by-one error in pagination</code> *   <code>docs: Update README with installation instructions</code> *   <code>chore: Update dependencies</code></p>"},{"location":"contributing/#versioning","title":"Versioning","text":"<p>The project version is managed through Git tags. When creating a release, an annotated tag (e.g., <code>v1.0.0</code>) should be used.</p>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to this project, you agree that your contributions will be licensed under the Apache License 2.0. See the LICENSE file for more details.</p>"},{"location":"contributing/#need-help","title":"Need Help?","text":"<p>If you have any questions or need assistance, feel free to open an issue or reach out to the maintainers.</p> <p>Thank you for contributing!</p>"},{"location":"gemini-cli/","title":"Adding to gemini-cli","text":"<p>To add this server to <code>gemini-cli</code>, you need to edit your <code>settings.json</code> file. You can find this file in <code>~/.gemini/settings.json</code> (user settings) or in <code>.gemini/settings.json</code> (project settings).</p> <p>Add the following to your <code>settings.json</code> file:</p> <pre><code>{\n  \"mcpServers\": {\n    \"sharedAgents\": {\n      \"httpUrl\": \"http://&lt;ip-address&gt;:8080\"\n    }\n  }\n}\n</code></pre>"},{"location":"gemini-cli/#using-the-mcp-tool","title":"Using the <code>mcp</code> tool","text":"<p>Once the <code>mcp-server</code> is configured in <code>gemini-cli</code>, you can use the <code>mcp</code> tool to interact with the server. For example, to list all available agent instructions:</p> <p>Prompt</p> <pre><code>/mcp list\n</code></pre> <p>Output</p> <pre><code>  \ud83d\udfe2 sharedAgents - Ready (2 tools)\n    Tools:\n    - get_agents_instructions\n    - list_agents_instructions\n</code></pre> <p>Prompt</p> <pre><code>list_agents_instructions\n</code></pre> <p>Output</p> <pre><code>\u2714 list_agents_instructions (sharedAgents MCP Server) list_agents_instructions (sharedAgents MCP Server)\n\n   {\n     \"files\": [\n       \"frame_fi\",\n       \"git\",\n       \"security_checks\",\n       \"dev_rules\",\n       \"common_prompts\",\n       \"homelab_docs\"\n     ]\n   }\n</code></pre> <p>Prompt</p> <pre><code>get_agents_instructions common_prompts\n</code></pre> <p>Output</p> <pre><code>\u2726 I have retrieved the \"common_prompts\" instructions. It contains guidelines for creating Markdown\n  documentation and for scripting in Bash and Python.\n</code></pre> <p>Example <code>gemini-cli</code> prompt to use the <code>common_prompts</code> agent to create a bash script.</p> <pre><code>using the get_agents_instructions common_prompts agent, write me a bash script that checks\ndownloads the latest release of sops from GitHub with architecture amd64 and linux.\n</code></pre> <p>Tip</p> <p>It's important to add the <code>get_agents_instructions</code> to the prompt so that <code>gemini-cli</code> knows which tool to use to retrieve the remote agent.</p> <p>Instead of explictly stating to use the mcp agent in every prompt, instruct <code>gemini-cli</code> to use the MCP server's prompts by adding the following to the project's <code>AGENTS.md</code> file.</p> <pre><code># Agent Instructions\n\n## Agent Rules\n\n## Ansible Guidelines Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `ansible_guidelines` agent when creating or modifying Ansible playbooks, roles, and inventories.\n\n## Cloud Best Practices Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `cloud_best_practices` agent when discussing cloud best practices.\n\n## Common Prompts Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `common_prompts` agent for general prompting guidelines.\n\n## Dev Rules Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `dev_rules` agent when discussing development rules.\n\n## Dockerfile Guidelines Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `dockerfile_guidelines` agent when creating or modifying Dockerfiles.\n\n## Git Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `git` agent for git-related queries.\n\n## Frame.fi Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `frame_fi` agent for Frame.fi related queries.\n\n## GitHub Repo Config Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `github_repo_config` agent when configuring GitHub repositories.\n\n## Homelab Docs Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `homelab_docs` agent for homelab documentation.\n\n## .env and SOPS Guidelines Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `env_sops_guidelines` agent when working with `.env` files and SOPS encryption.\n\n## MkDocs-Material Guidelines Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `mkdocs_material_guidelines` agent when creating or modifying MkDocs-Material documentation.\n\n## README.md Guidelines Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `readme_guidelines` agent when creating or modifying `README.md` files.\n\n## MkDocs Site Creation Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `mkdocs_site_creation` agent when creating MkDocs sites.\n\n## Platform.io Guidelines Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `platformio_guidelines` agent when creating or modifying Platform.io projects.\n\n## Recommended Bash Scripts Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `recommended_bash_scripts` agent when recommending bash scripts.\n\n## Bash Guidelines Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `bash_guidelines` agent when discussing bash scripting guidelines.\n\n## Python Guidelines Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `python_guidelines` agent when discussing python scripting guidelines.\n\n## Security Checks Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `security_checks` agent when performing security checks.\n\n## SOPS Config Creation Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `sops_config_creation` agent when configuring SOPS.\n\n## Taskfile Creation Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `taskfile_creation` agent when creating Taskfiles.\n\n## Terraform Guidelines Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `terraform_guidelines` agent when discussing Terraform guidelines.\n\n## YAML Guidelines Agent Rules\n\n- **ALWAYS** use the `sharedAgents` MCP server's `get_agents_instructions` `yaml_guidelines` agent when creating or modifying YAML files.\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>Task</li> <li>Docker (for containerized deployment)</li> <li>pre-commit (for development)</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/nicholaswilde/mcp-server.git\ncd mcp-server\n</code></pre></p> </li> <li> <p>Set up the Python virtual environment: <pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre></p> </li> <li> <p>Install dependencies:     This project uses <code>pip-tools</code> to manage dependencies.     <pre><code>pip install pip-tools\ntask install\n</code></pre></p> </li> <li> <p>Set up pre-commit hooks:     Install the pre-commit hooks to ensure your commits adhere to the project's code style and quality standards.     <pre><code>pre-commit install\n</code></pre></p> </li> </ol>"},{"location":"usage/","title":"Usage","text":"<p>You can run the server using Task, which simplifies the process, or with Docker Compose for a containerized environment.</p>"},{"location":"usage/#running-the-server-locally","title":"Running the Server Locally","text":"<p>To run the FastAPI server on your local machine:</p> TaskManual <pre><code>task run\n</code></pre> <pre><code>AGENTS_LIBRARY_PATH=\"./agents-library\" &amp;&amp; ./venv/bin/python -m uvicorn app.server:app --host 0.0.0.0 --port 8080 --reload\n</code></pre> <p>The server will be available at <code>http://0.0.0.0:8080</code>. It will automatically reload when code changes are detected.</p>"},{"location":"usage/#running-with-docker","title":"Running with Docker","text":"<p>To build the server in a Docker container:</p> TaskManual <pre><code>task build\n</code></pre> <pre><code>docker build -t nicholaswilde/mcp-server .\n</code></pre> <p>To run the server in a Docker container:</p> TaskManual <pre><code>task docker-run\n</code></pre> <pre><code>docker run -p 8080:8080 nicholaswilde/mcp-server\n</code></pre> <p>The server will be available at <code>http://localhost:8080</code>.</p> compose.yaml <pre><code>---\nservices:\n  mcp-server:\n    build:\n      context: .\n      args:\n        VERSION: ${GIT_TAG:-latest}\n    image: nicholaswilde/mcp-server:${GIT_TAG:-latest}\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./agents-library:/app/agents-library\n    environment:\n      - PUID=${PUID:-1000}\n      - PGID=${PGID:-1000}\n      - SERVER_PORT=${SERVER_PORT:-8080}\n      - AGENTS_LIBRARY_PATH=${AGENTS_LIBRARY_PATH:-/app/agents-library}\n      - MCP_SERVER_NAME=${MCP_SERVER_NAME:-mcp-server}\n      - MCP_SERVER_STREAMABLE_HTTP_PATH=${MCP_SERVER_STREAMABLE_HTTP_PATH:-/}\n      - MCP_SERVER_JSON_RESPONSE=${MCP_SERVER_JSON_RESPONSE:-true}\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 5s\n</code></pre>"},{"location":"usage/#available-tasks","title":"Available Tasks","text":"<pre><code>task: Available tasks for this project:\n* build:                    Build and push the Docker image for multiple architectures (amd64, arm64).\n* compile:                  Compile requirements.in to update requirements.txt.\n* default:                  List all available tasks.\n* docker-run:               Run the Docker container.\n* export:                   Export task  list\n* gflash:                   Run Gemini with the gemini-2.5-flash model.\n* glite:                    Run Gemini with the gemini-2.5-flash-lite model.\n* gpro:                     Run Gemini with the gemini-2.5-pro model.\n* install:                  Install Python dependencies using pip-sync.\n* install-pre-commit:       Install pre-commit hooks for the repository.\n* lint:                     Run linting and formatting checks using ruff.\n* pre-commit-run:           Run all pre-commit hooks on all files.\n* ruff:                     Run ruff checks and formatting.\n* run:                      Run the FastAPI server locally.\n* serve:                    Serve mkdocs-material\n* test:                     Run Python unit tests using pytest.\n</code></pre>"}]}