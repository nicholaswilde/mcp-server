---
name: "Gemini Release Drafter"

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      current_tag:
        description: 'The new tag to create the release for (e.g., v1.1.0)'
        required: true
      previous_tag:
        description: 'The old tag to start the changelog from (e.g., v1.0.0)'
        required: true

jobs:
  draft_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # Step 1: Check out the repository's code.
      # `fetch-depth: 0` is crucial as it fetches the entire git history,
      # which is needed to compare tags and get commit logs.
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Determine the previous tag.
      # This is used as the starting point for the commit log.
      # It finds the tag just before the one that triggered the workflow.
      - name: Get previous tag
        id: previoustag
        run: |
          echo "tag=$(git describe --tags --abbrev=0 "HEAD^")" >> $GITHUB_OUTPUT

      # Step 3: Get the commit log between the previous and current tags.
      # If no previous tag is found (e.g., for the very first release),
      # it gets all commits for the current tag.
      - name: Get commit log
        id: gitlog
        run: |
          if [ -z "${{ steps.previoustag.outputs.tag }}" ]; then
            log=$(git log ${{ github.ref_name }} --pretty=format:'- %s')
          else
            log=$(git log ${{ steps.previoustag.outputs.tag }}...${{ github.ref_name }} --pretty=format:'- %s')
          fi
          # Using a delimiter for multiline strings in GitHub Actions
          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo "$log" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Step 4: Generate release notes using the official Gemini CLI action.
      # This action handles the installation and execution of the Gemini CLI.
      - name: "Generate release notes with Gemini"
        id: gemini
        uses: google-github-actions/run-gemini-cli@v0
        with:
          api_key: ${{ secrets.GEMINI_API_KEY }}
          prompt: |
            Please act as a release notes author. Based on the following git commit messages, create a summary for a software release. The output should be in markdown format. Group the changes into logical sections like '‚ú® New Features', 'üêõ Bug Fixes', and 'üî® Other Changes'. The commit messages are:

            ${{ steps.gitlog.outputs.log }}

      # Step 5: Create the draft release on GitHub.
      # This uses the official GitHub action to create a release,
      # using the notes generated by Gemini as the body.
      - name: "Create Draft Release"
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.gemini.outputs.result }}
          draft: true
          prerelease: false
